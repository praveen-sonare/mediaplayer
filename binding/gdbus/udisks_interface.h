/*
 * Generated by gdbus-codegen 2.52.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __UDISKS_INTERFACE_H__
#define __UDISKS_INTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.UDisks */

#define TYPE_ORG_FREEDESKTOP_UDISKS (org_freedesktop_udisks_get_type ())
#define ORG_FREEDESKTOP_UDISKS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_UDISKS, OrgFreedesktopUDisks))
#define IS_ORG_FREEDESKTOP_UDISKS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_UDISKS))
#define ORG_FREEDESKTOP_UDISKS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_UDISKS, OrgFreedesktopUDisksIface))

struct _OrgFreedesktopUDisks;
typedef struct _OrgFreedesktopUDisks OrgFreedesktopUDisks;
typedef struct _OrgFreedesktopUDisksIface OrgFreedesktopUDisksIface;

struct _OrgFreedesktopUDisksIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_drive_inhibit_all_polling) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_options);

  gboolean (*handle_drive_set_all_spindown_timeouts) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    gint arg_timeout_seconds,
    const gchar *const *arg_options);

  gboolean (*handle_drive_uninhibit_all_polling) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_cookie);

  gboolean (*handle_drive_unset_all_spindown_timeouts) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_cookie);

  gboolean (*handle_enumerate_adapters) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_enumerate_device_files) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_enumerate_devices) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_enumerate_expanders) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_enumerate_ports) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_find_device_by_device_file) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device_file);

  gboolean (*handle_find_device_by_major_minor) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    gint64 arg_device_major,
    gint64 arg_device_minor);

  gboolean (*handle_inhibit) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_linux_lvm2_lvcreate) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_group_uuid,
    const gchar *arg_name,
    guint64 arg_size,
    guint arg_num_stripes,
    guint64 arg_stripe_size,
    guint arg_num_mirrors,
    const gchar *const *arg_options,
    const gchar *arg_fstype,
    const gchar *const *arg_fsoptions);

  gboolean (*handle_linux_lvm2_lvremove) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_group_uuid,
    const gchar *arg_uuid,
    const gchar *const *arg_options);

  gboolean (*handle_linux_lvm2_lvset_name) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_group_uuid,
    const gchar *arg_uuid,
    const gchar *arg_name);

  gboolean (*handle_linux_lvm2_lvstart) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_group_uuid,
    const gchar *arg_uuid,
    const gchar *const *arg_options);

  gboolean (*handle_linux_lvm2_vgadd_pv) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    const gchar *arg_physical_volume,
    const gchar *const *arg_options);

  gboolean (*handle_linux_lvm2_vgremove_pv) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_vg_uuid,
    const gchar *arg_pv_uuid,
    const gchar *const *arg_options);

  gboolean (*handle_linux_lvm2_vgset_name) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    const gchar *arg_name);

  gboolean (*handle_linux_lvm2_vgstart) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    const gchar *const *arg_options);

  gboolean (*handle_linux_lvm2_vgstop) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    const gchar *const *arg_options);

  gboolean (*handle_linux_md_create) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_components,
    const gchar *arg_level,
    guint64 arg_stripe_size,
    const gchar *arg_name,
    const gchar *const *arg_options);

  gboolean (*handle_linux_md_start) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_components,
    const gchar *const *arg_options);

  gboolean (*handle_uninhibit) (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_cookie);

  gboolean  (*get_daemon_is_inhibited) (OrgFreedesktopUDisks *object);

  const gchar * (*get_daemon_version) (OrgFreedesktopUDisks *object);

  GVariant * (*get_known_filesystems) (OrgFreedesktopUDisks *object);

  gboolean  (*get_supports_luks_devices) (OrgFreedesktopUDisks *object);

  void (*adapter_added) (
    OrgFreedesktopUDisks *object,
    const gchar *arg_adapter);

  void (*adapter_changed) (
    OrgFreedesktopUDisks *object,
    const gchar *arg_adapter);

  void (*adapter_removed) (
    OrgFreedesktopUDisks *object,
    const gchar *arg_adapter);

  void (*device_added) (
    OrgFreedesktopUDisks *object,
    const gchar *arg_device);

  void (*device_changed) (
    OrgFreedesktopUDisks *object,
    const gchar *arg_device);

  void (*device_job_changed) (
    OrgFreedesktopUDisks *object,
    const gchar *arg_device,
    gboolean arg_job_in_progress,
    gboolean arg_job_is_cancellable,
    const gchar *arg_job_id,
    gint arg_job_num_tasks,
    gint arg_job_cur_task,
    const gchar *arg_job_cur_task_id,
    gdouble arg_job_cur_task_percentage);

  void (*device_removed) (
    OrgFreedesktopUDisks *object,
    const gchar *arg_device);

  void (*expander_added) (
    OrgFreedesktopUDisks *object,
    const gchar *arg_expander);

  void (*expander_changed) (
    OrgFreedesktopUDisks *object,
    const gchar *arg_expander);

  void (*expander_removed) (
    OrgFreedesktopUDisks *object,
    const gchar *arg_expander);

  void (*port_added) (
    OrgFreedesktopUDisks *object,
    const gchar *arg_port);

  void (*port_changed) (
    OrgFreedesktopUDisks *object,
    const gchar *arg_port);

  void (*port_removed) (
    OrgFreedesktopUDisks *object,
    const gchar *arg_port);

};

GType org_freedesktop_udisks_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_udisks_interface_info (void);
guint org_freedesktop_udisks_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_udisks_complete_enumerate_adapters (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *devices);

void org_freedesktop_udisks_complete_enumerate_expanders (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *devices);

void org_freedesktop_udisks_complete_enumerate_ports (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *devices);

void org_freedesktop_udisks_complete_enumerate_devices (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *devices);

void org_freedesktop_udisks_complete_enumerate_device_files (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *device_files);

void org_freedesktop_udisks_complete_find_device_by_device_file (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *device);

void org_freedesktop_udisks_complete_find_device_by_major_minor (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *device);

void org_freedesktop_udisks_complete_drive_inhibit_all_polling (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *cookie);

void org_freedesktop_udisks_complete_drive_uninhibit_all_polling (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_udisks_complete_drive_set_all_spindown_timeouts (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *cookie);

void org_freedesktop_udisks_complete_drive_unset_all_spindown_timeouts (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_udisks_complete_linux_lvm2_vgstart (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_udisks_complete_linux_lvm2_vgstop (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_udisks_complete_linux_lvm2_vgset_name (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_udisks_complete_linux_lvm2_vgadd_pv (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_udisks_complete_linux_lvm2_vgremove_pv (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_udisks_complete_linux_lvm2_lvset_name (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_udisks_complete_linux_lvm2_lvstart (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_udisks_complete_linux_lvm2_lvremove (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_udisks_complete_linux_lvm2_lvcreate (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *created_device);

void org_freedesktop_udisks_complete_linux_md_start (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *device);

void org_freedesktop_udisks_complete_linux_md_create (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *device);

void org_freedesktop_udisks_complete_inhibit (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation,
    const gchar *cookie);

void org_freedesktop_udisks_complete_uninhibit (
    OrgFreedesktopUDisks *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void org_freedesktop_udisks_emit_device_added (
    OrgFreedesktopUDisks *object,
    const gchar *arg_device);

void org_freedesktop_udisks_emit_device_removed (
    OrgFreedesktopUDisks *object,
    const gchar *arg_device);

void org_freedesktop_udisks_emit_device_changed (
    OrgFreedesktopUDisks *object,
    const gchar *arg_device);

void org_freedesktop_udisks_emit_device_job_changed (
    OrgFreedesktopUDisks *object,
    const gchar *arg_device,
    gboolean arg_job_in_progress,
    gboolean arg_job_is_cancellable,
    const gchar *arg_job_id,
    gint arg_job_num_tasks,
    gint arg_job_cur_task,
    const gchar *arg_job_cur_task_id,
    gdouble arg_job_cur_task_percentage);

void org_freedesktop_udisks_emit_adapter_added (
    OrgFreedesktopUDisks *object,
    const gchar *arg_adapter);

void org_freedesktop_udisks_emit_adapter_removed (
    OrgFreedesktopUDisks *object,
    const gchar *arg_adapter);

void org_freedesktop_udisks_emit_adapter_changed (
    OrgFreedesktopUDisks *object,
    const gchar *arg_adapter);

void org_freedesktop_udisks_emit_expander_added (
    OrgFreedesktopUDisks *object,
    const gchar *arg_expander);

void org_freedesktop_udisks_emit_expander_removed (
    OrgFreedesktopUDisks *object,
    const gchar *arg_expander);

void org_freedesktop_udisks_emit_expander_changed (
    OrgFreedesktopUDisks *object,
    const gchar *arg_expander);

void org_freedesktop_udisks_emit_port_added (
    OrgFreedesktopUDisks *object,
    const gchar *arg_port);

void org_freedesktop_udisks_emit_port_removed (
    OrgFreedesktopUDisks *object,
    const gchar *arg_port);

void org_freedesktop_udisks_emit_port_changed (
    OrgFreedesktopUDisks *object,
    const gchar *arg_port);



/* D-Bus method calls: */
void org_freedesktop_udisks_call_enumerate_adapters (
    OrgFreedesktopUDisks *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_enumerate_adapters_finish (
    OrgFreedesktopUDisks *proxy,
    gchar ***out_devices,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_enumerate_adapters_sync (
    OrgFreedesktopUDisks *proxy,
    gchar ***out_devices,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_enumerate_expanders (
    OrgFreedesktopUDisks *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_enumerate_expanders_finish (
    OrgFreedesktopUDisks *proxy,
    gchar ***out_devices,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_enumerate_expanders_sync (
    OrgFreedesktopUDisks *proxy,
    gchar ***out_devices,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_enumerate_ports (
    OrgFreedesktopUDisks *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_enumerate_ports_finish (
    OrgFreedesktopUDisks *proxy,
    gchar ***out_devices,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_enumerate_ports_sync (
    OrgFreedesktopUDisks *proxy,
    gchar ***out_devices,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_enumerate_devices (
    OrgFreedesktopUDisks *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_enumerate_devices_finish (
    OrgFreedesktopUDisks *proxy,
    gchar ***out_devices,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_enumerate_devices_sync (
    OrgFreedesktopUDisks *proxy,
    gchar ***out_devices,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_enumerate_device_files (
    OrgFreedesktopUDisks *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_enumerate_device_files_finish (
    OrgFreedesktopUDisks *proxy,
    gchar ***out_device_files,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_enumerate_device_files_sync (
    OrgFreedesktopUDisks *proxy,
    gchar ***out_device_files,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_find_device_by_device_file (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_device_file,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_find_device_by_device_file_finish (
    OrgFreedesktopUDisks *proxy,
    gchar **out_device,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_find_device_by_device_file_sync (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_device_file,
    gchar **out_device,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_find_device_by_major_minor (
    OrgFreedesktopUDisks *proxy,
    gint64 arg_device_major,
    gint64 arg_device_minor,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_find_device_by_major_minor_finish (
    OrgFreedesktopUDisks *proxy,
    gchar **out_device,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_find_device_by_major_minor_sync (
    OrgFreedesktopUDisks *proxy,
    gint64 arg_device_major,
    gint64 arg_device_minor,
    gchar **out_device,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_drive_inhibit_all_polling (
    OrgFreedesktopUDisks *proxy,
    const gchar *const *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_drive_inhibit_all_polling_finish (
    OrgFreedesktopUDisks *proxy,
    gchar **out_cookie,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_drive_inhibit_all_polling_sync (
    OrgFreedesktopUDisks *proxy,
    const gchar *const *arg_options,
    gchar **out_cookie,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_drive_uninhibit_all_polling (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_cookie,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_drive_uninhibit_all_polling_finish (
    OrgFreedesktopUDisks *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_drive_uninhibit_all_polling_sync (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_cookie,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_drive_set_all_spindown_timeouts (
    OrgFreedesktopUDisks *proxy,
    gint arg_timeout_seconds,
    const gchar *const *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_drive_set_all_spindown_timeouts_finish (
    OrgFreedesktopUDisks *proxy,
    gchar **out_cookie,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_drive_set_all_spindown_timeouts_sync (
    OrgFreedesktopUDisks *proxy,
    gint arg_timeout_seconds,
    const gchar *const *arg_options,
    gchar **out_cookie,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_drive_unset_all_spindown_timeouts (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_cookie,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_drive_unset_all_spindown_timeouts_finish (
    OrgFreedesktopUDisks *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_drive_unset_all_spindown_timeouts_sync (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_cookie,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_linux_lvm2_vgstart (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_uuid,
    const gchar *const *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_linux_lvm2_vgstart_finish (
    OrgFreedesktopUDisks *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_linux_lvm2_vgstart_sync (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_uuid,
    const gchar *const *arg_options,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_linux_lvm2_vgstop (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_uuid,
    const gchar *const *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_linux_lvm2_vgstop_finish (
    OrgFreedesktopUDisks *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_linux_lvm2_vgstop_sync (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_uuid,
    const gchar *const *arg_options,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_linux_lvm2_vgset_name (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_uuid,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_linux_lvm2_vgset_name_finish (
    OrgFreedesktopUDisks *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_linux_lvm2_vgset_name_sync (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_uuid,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_linux_lvm2_vgadd_pv (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_uuid,
    const gchar *arg_physical_volume,
    const gchar *const *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_linux_lvm2_vgadd_pv_finish (
    OrgFreedesktopUDisks *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_linux_lvm2_vgadd_pv_sync (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_uuid,
    const gchar *arg_physical_volume,
    const gchar *const *arg_options,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_linux_lvm2_vgremove_pv (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_vg_uuid,
    const gchar *arg_pv_uuid,
    const gchar *const *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_linux_lvm2_vgremove_pv_finish (
    OrgFreedesktopUDisks *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_linux_lvm2_vgremove_pv_sync (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_vg_uuid,
    const gchar *arg_pv_uuid,
    const gchar *const *arg_options,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_linux_lvm2_lvset_name (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_group_uuid,
    const gchar *arg_uuid,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_linux_lvm2_lvset_name_finish (
    OrgFreedesktopUDisks *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_linux_lvm2_lvset_name_sync (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_group_uuid,
    const gchar *arg_uuid,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_linux_lvm2_lvstart (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_group_uuid,
    const gchar *arg_uuid,
    const gchar *const *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_linux_lvm2_lvstart_finish (
    OrgFreedesktopUDisks *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_linux_lvm2_lvstart_sync (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_group_uuid,
    const gchar *arg_uuid,
    const gchar *const *arg_options,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_linux_lvm2_lvremove (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_group_uuid,
    const gchar *arg_uuid,
    const gchar *const *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_linux_lvm2_lvremove_finish (
    OrgFreedesktopUDisks *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_linux_lvm2_lvremove_sync (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_group_uuid,
    const gchar *arg_uuid,
    const gchar *const *arg_options,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_linux_lvm2_lvcreate (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_group_uuid,
    const gchar *arg_name,
    guint64 arg_size,
    guint arg_num_stripes,
    guint64 arg_stripe_size,
    guint arg_num_mirrors,
    const gchar *const *arg_options,
    const gchar *arg_fstype,
    const gchar *const *arg_fsoptions,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_linux_lvm2_lvcreate_finish (
    OrgFreedesktopUDisks *proxy,
    gchar **out_created_device,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_linux_lvm2_lvcreate_sync (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_group_uuid,
    const gchar *arg_name,
    guint64 arg_size,
    guint arg_num_stripes,
    guint64 arg_stripe_size,
    guint arg_num_mirrors,
    const gchar *const *arg_options,
    const gchar *arg_fstype,
    const gchar *const *arg_fsoptions,
    gchar **out_created_device,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_linux_md_start (
    OrgFreedesktopUDisks *proxy,
    const gchar *const *arg_components,
    const gchar *const *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_linux_md_start_finish (
    OrgFreedesktopUDisks *proxy,
    gchar **out_device,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_linux_md_start_sync (
    OrgFreedesktopUDisks *proxy,
    const gchar *const *arg_components,
    const gchar *const *arg_options,
    gchar **out_device,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_linux_md_create (
    OrgFreedesktopUDisks *proxy,
    const gchar *const *arg_components,
    const gchar *arg_level,
    guint64 arg_stripe_size,
    const gchar *arg_name,
    const gchar *const *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_linux_md_create_finish (
    OrgFreedesktopUDisks *proxy,
    gchar **out_device,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_linux_md_create_sync (
    OrgFreedesktopUDisks *proxy,
    const gchar *const *arg_components,
    const gchar *arg_level,
    guint64 arg_stripe_size,
    const gchar *arg_name,
    const gchar *const *arg_options,
    gchar **out_device,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_inhibit (
    OrgFreedesktopUDisks *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_inhibit_finish (
    OrgFreedesktopUDisks *proxy,
    gchar **out_cookie,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_inhibit_sync (
    OrgFreedesktopUDisks *proxy,
    gchar **out_cookie,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_udisks_call_uninhibit (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_cookie,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_udisks_call_uninhibit_finish (
    OrgFreedesktopUDisks *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_udisks_call_uninhibit_sync (
    OrgFreedesktopUDisks *proxy,
    const gchar *arg_cookie,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *org_freedesktop_udisks_get_daemon_version (OrgFreedesktopUDisks *object);
gchar *org_freedesktop_udisks_dup_daemon_version (OrgFreedesktopUDisks *object);
void org_freedesktop_udisks_set_daemon_version (OrgFreedesktopUDisks *object, const gchar *value);

gboolean org_freedesktop_udisks_get_daemon_is_inhibited (OrgFreedesktopUDisks *object);
void org_freedesktop_udisks_set_daemon_is_inhibited (OrgFreedesktopUDisks *object, gboolean value);

gboolean org_freedesktop_udisks_get_supports_luks_devices (OrgFreedesktopUDisks *object);
void org_freedesktop_udisks_set_supports_luks_devices (OrgFreedesktopUDisks *object, gboolean value);

GVariant *org_freedesktop_udisks_get_known_filesystems (OrgFreedesktopUDisks *object);
GVariant *org_freedesktop_udisks_dup_known_filesystems (OrgFreedesktopUDisks *object);
void org_freedesktop_udisks_set_known_filesystems (OrgFreedesktopUDisks *object, GVariant *value);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_UDISKS_PROXY (org_freedesktop_udisks_proxy_get_type ())
#define ORG_FREEDESKTOP_UDISKS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_UDISKS_PROXY, OrgFreedesktopUDisksProxy))
#define ORG_FREEDESKTOP_UDISKS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_UDISKS_PROXY, OrgFreedesktopUDisksProxyClass))
#define ORG_FREEDESKTOP_UDISKS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_UDISKS_PROXY, OrgFreedesktopUDisksProxyClass))
#define IS_ORG_FREEDESKTOP_UDISKS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_UDISKS_PROXY))
#define IS_ORG_FREEDESKTOP_UDISKS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_UDISKS_PROXY))

typedef struct _OrgFreedesktopUDisksProxy OrgFreedesktopUDisksProxy;
typedef struct _OrgFreedesktopUDisksProxyClass OrgFreedesktopUDisksProxyClass;
typedef struct _OrgFreedesktopUDisksProxyPrivate OrgFreedesktopUDisksProxyPrivate;

struct _OrgFreedesktopUDisksProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopUDisksProxyPrivate *priv;
};

struct _OrgFreedesktopUDisksProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_udisks_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopUDisksProxy, g_object_unref)
#endif

void org_freedesktop_udisks_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopUDisks *org_freedesktop_udisks_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopUDisks *org_freedesktop_udisks_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_udisks_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopUDisks *org_freedesktop_udisks_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopUDisks *org_freedesktop_udisks_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_UDISKS_SKELETON (org_freedesktop_udisks_skeleton_get_type ())
#define ORG_FREEDESKTOP_UDISKS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_UDISKS_SKELETON, OrgFreedesktopUDisksSkeleton))
#define ORG_FREEDESKTOP_UDISKS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_UDISKS_SKELETON, OrgFreedesktopUDisksSkeletonClass))
#define ORG_FREEDESKTOP_UDISKS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_UDISKS_SKELETON, OrgFreedesktopUDisksSkeletonClass))
#define IS_ORG_FREEDESKTOP_UDISKS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_UDISKS_SKELETON))
#define IS_ORG_FREEDESKTOP_UDISKS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_UDISKS_SKELETON))

typedef struct _OrgFreedesktopUDisksSkeleton OrgFreedesktopUDisksSkeleton;
typedef struct _OrgFreedesktopUDisksSkeletonClass OrgFreedesktopUDisksSkeletonClass;
typedef struct _OrgFreedesktopUDisksSkeletonPrivate OrgFreedesktopUDisksSkeletonPrivate;

struct _OrgFreedesktopUDisksSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopUDisksSkeletonPrivate *priv;
};

struct _OrgFreedesktopUDisksSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_udisks_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopUDisksSkeleton, g_object_unref)
#endif

OrgFreedesktopUDisks *org_freedesktop_udisks_skeleton_new (void);


G_END_DECLS

#endif /* __UDISKS_INTERFACE_H__ */
